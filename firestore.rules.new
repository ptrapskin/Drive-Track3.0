rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function userHasFamilyId(familyId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.familyId == familyId;
    }
    
    // Profiles
    match /profiles/{familyId} {
      allow read, write: if userHasFamilyId(familyId);
      allow create: if isOwner(request.auth.uid) && request.resource.data.familyId == request.auth.uid;
    }
    
    match /profiles/{familyId}/{collection}/{document} {
      allow read, write: if userHasFamilyId(familyId);
    }

    // Users
    match /users/{userId} {
      // Allow any authenticated user to read from the users collection. This is needed
      // for the userHasFamilyId() helper function to work for guardians.
      allow read: if request.auth != null;
      allow write: if isOwner(userId);
      allow create: if isOwner(userId);
    }
    
    // Shares
    match /shares/{shareId} {
      // Allow authenticated users to read and create shares.
      allow read, create: if request.auth != null;
      // Allow users to update or delete a share if they are the student who created it
      // or the guardian who is being invited.
      allow update, delete: if request.auth.token.email == resource.data.studentEmail || request.auth.token.email == resource.data.guardianEmail;
    }
  }
}
