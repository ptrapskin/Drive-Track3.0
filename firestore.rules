
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Function to check if a share exists between a student and the logged-in user (guardian)
    function isSharedWith(studentUid) {
      return exists(/databases/$(database)/documents/shares/$(request.auth.uid)_$(studentUid)) || 
             exists(
                /databases/$(database)/documents/shares/$(studentUid)_$(request.auth.uid)
              ) || 
             get(/databases/$(database)/documents/shares/share_doc_placeholder).data.studentUid == studentUid; // this line is just for a placeholder check
    }
    
    function isGuardianFor(studentUid) {
        let shares = get(/databases/$(database)/documents/shares?where("studentUid", "==", studentUid).where("guardianEmail", "==", request.auth.email));
        return shares.size() > 0;
    }

    function isShared(studentUid) {
      // Check if there's a share document where the requesting user is the guardian for the student
      return exists(
        /databases/$(database)/documents/shares?query=guardianEmail==request.auth.email;studentUid==studentUid
      );
    }

    // Allow users to create, read and update their own profile
    match /profiles/{userId} {
      allow read, update, create: if request.auth.uid == userId;
      
      // Allow a guardian to read the student's profile
      allow read: if isGuardianFor(userId);
    }
    
    // Allow users to manage their own sessions
    match /profiles/{userId}/sessions/{sessionId} {
      allow read, write, create, delete: if request.auth.uid == userId || isGuardianFor(userId);
    }

    // Allow users to manage their own skills
    match /profiles/{userId}/skills/{skillId} {
      allow read, write: if request.auth.uid == userId;
      allow read: if isGuardianFor(userId);
    }

    // Rules for the shares collection
    match /shares/{shareId} {
        // A user can create a share if they are the student
        allow create: if request.auth.uid == request.resource.data.studentUid;
        
        // A user can delete a share if they are the student
        allow delete: if get(/databases/$(database)/documents/shares/$(shareId)).data.studentUid == request.auth.uid;
        
        // A user (guardian) can read a share document if it's shared with them
        allow read: if get(/databases/$(database)/documents/shares/$(shareId)).data.guardianEmail == request.auth.email;
    }
  }
}
