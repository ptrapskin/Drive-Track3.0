
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a share exists
    function isSharedWith(studentUid) {
      return exists(/databases/$(database)/documents/shares/$(request.auth.uid)_$(studentUid)) ||
             exists(/databases/$(database)/documents/shares/$(studentUid)_$(request.auth.uid)) ||
             get(/databases/$(database)/documents/shares/$(studentUid)).data.guardianEmail == request.auth.token.email;
    }
    
    // Profiles can be read by the owner or by someone they've shared with.
    // Profiles can only be written to by the owner.
    match /profiles/{userId} {
      allow read: if request.auth.uid == userId || isSharedWith(userId);
      allow write: if request.auth.uid == userId;

      // Sessions can be read by the owner or someone they've shared with.
      // Sessions can be created, updated, or deleted by the owner OR the guardian.
      match /sessions/{sessionId} {
        allow read: if request.auth.uid == userId || isSharedWith(userId);
        allow write: if request.auth.uid == userId || isSharedWith(userId);
      }
      
      // Skills can be read by owner or someone they've shared with.
      // Skills can only be modified by the owner.
      match /skills/{skillId} {
        allow read, write: if request.auth.uid == userId;
        allow read: if isSharedWith(userId);
      }
    }

    // Shares can be created if the student is the one creating it.
    // Shares can be read or deleted by either the student or the guardian.
    match /shares/{shareId} {
      allow create: if request.auth.uid == request.resource.data.studentUid;
      allow read, delete: if request.auth.uid == resource.data.studentUid || request.auth.token.email == resource.data.guardianEmail;
    }
  }
}
