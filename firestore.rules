
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    // Function to check if the requesting user is a guardian for the student
    function isGuardianForStudent(studentUid) {
      return request.auth != null &&
             exists(/databases/$(database)/documents/guardianInvites/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/guardianInvites/$(request.auth.uid)).data.students[studentUid] != null;
    }

    match /profiles/{userId} {
      allow read, update: if isOwner(userId) || isGuardianForStudent(userId);
      allow create: if isOwner(userId);

      match /sessions/{sessionId} {
        allow read, list, create, update, delete: if isOwner(userId) || isGuardianForStudent(userId);
      }

      match /skills/{skillId} {
        allow read, list, create, update, delete: if isOwner(userId) || isGuardianForStudent(userId);
      }
    }

    match /guardianInvites/{guardianId} {
      // Allow guardians to read their own invite document
      allow read: if isOwner(guardianId);
      // Allow students (or a cloud function with admin rights) to create/update invites.
      // This is simplified; in a real app, you'd secure this with a cloud function.
      allow write: if request.auth != null;
    }
  }
}

    