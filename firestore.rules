
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if a guardian has access to a student's data.
    function isGuardianOf(studentUid) {
      return exists(/databases/$(database)/documents/guardianInvites/$(request.auth.uid)) &&
             studentUid in get(/databases/$(database)/documents/guardianInvites/$(request.auth.uid)).data.students;
    }

    match /profiles/{userId} {
      // Users can read/write their own profile.
      // Guardians can read a student's profile they have access to.
      allow read: if request.auth.uid == userId || isGuardianOf(userId);
      allow create, update: if request.auth.uid == userId;

      // Rules for subcollections (sessions, skills)
      match /{collection}/{docId} {
        // Users can manage their own subcollection documents.
        // Guardians can also manage the subcollection documents of students they have access to.
        allow read, write: if request.auth.uid == userId || isGuardianOf(userId);
      }
    }

    // Rules for the guardianInvites collection
    match /guardianInvites/{guardianUid} {
      // Only the guardian can read their own invite document.
      allow read: if request.auth.uid == guardianUid;
      // Creation/updates are handled by the Cloud Function.
      allow write: if false; 
    }
  }
}
